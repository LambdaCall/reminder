{"version":3,"sources":["logo.svg","components/SearchBar.js","components/Card.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","className","style","marginBottom","type","placeholder","Card","props","minWidth","this","title","content","React","Component","List","componentDidMount","window","localStorage","i","newCards","state","cards","push","setState","map","id","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,0FCE9BC,G,kBAAY,WACrB,OACI,0BAAMC,UAAU,kBAAkBC,MAAO,CAACC,aAAa,SACvD,yBAAKF,UAAU,8DACX,2BAAOA,UAAU,kHAAkHG,KAAK,OAAOC,YAAY,mBAC3J,4BAAQJ,UAAU,kIAAkIG,KAAK,UAAzJ,c,4BCJCE,EAAb,kDAEI,WAAYC,GAAO,uCACTA,GAHd,qDAOQ,OACI,yBAAKN,UAAU,qDAAqDC,MAAO,CAACM,SAAS,QACjF,yBAAKP,UAAU,aACf,yBAAKA,UAAU,0BAA0BQ,KAAKF,MAAMG,OACpD,uBAAGT,UAAU,2BACRQ,KAAKF,MAAMI,UAGhB,yBAAKV,UAAU,aACf,0BAAMA,UAAU,4FAAhB,gBACA,0BAAMA,UAAU,4FAAhB,WACA,0BAAMA,UAAU,uFAAhB,iBAlBhB,GAA0BW,IAAMC,WCCnBC,EAAb,kDACI,WAAYP,GAAO,IAAD,8BACd,cAAMA,IAMVQ,kBAAmB,WACDC,OAAOC,aAErB,IAFA,IAEQC,EAAI,EAAGA,EAAI,IAAKA,IAAI,CACxB,IAAMC,EAAW,EAAKC,MAAMC,MAC5BF,EAASG,KAAK,CAACZ,MAAM,OAAOC,QAAQ,SACpC,EAAKY,SAAS,CACVF,MAAQF,MAZhB,EAAKC,MAAQ,CACTC,MAAQ,IAHE,EADtB,qDAuBQ,OACIZ,KAAKW,MAAMC,MAAMG,KAAI,SAACjB,EAAOkB,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAIf,MAAOH,EAAMG,MAAOC,QAASJ,EAAMI,iBAzBzE,GAA0BC,IAAMC,WCajBc,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc2B,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d25dd121.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport const SearchBar = () => {\r\n    return (\r\n        <form className=\"w-full max-w-sm\" style={{marginBottom:'10px'}}>\r\n        <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\r\n            <input className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\" type=\"text\" placeholder=\"Search Task...\" />\r\n            <button className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\" type=\"button\">\r\n                Search\r\n            </button>\r\n        </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Styling done by tailwind\r\nexport class Card extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"max-w-lg w-auto rounded overflow-hidden shadow-lg \" style={{minWidth:\"80%\"}} >        \r\n                <div className=\"px-6 py-4\">\r\n                <div className=\"font-bold text-xl mb-2\">{this.props.title}</div>\r\n                <p className=\"text-gray-700 text-base\">\r\n                    {this.props.content}\r\n                </p>\r\n                </div>\r\n                <div className=\"px-6 py-4\">\r\n                <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">#photography</span>\r\n                <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">#travel</span>\r\n                <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700\">#winter</span>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n}\r\n","import React from 'react';\r\nimport { Card } from './Card';\r\n\r\n\r\nexport class List extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            cards : []\r\n        }\r\n    }\r\n\r\n    componentDidMount= () =>{\r\n        let storage = window.localStorage;\r\n    \r\n        for(let i = 0; i < 100; i++){\r\n            const newCards = this.state.cards\r\n            newCards.push({title:\"test\",content:\"test\"});\r\n            this.setState({\r\n                cards : newCards\r\n            });\r\n        }\r\n        // this.cards = storage.getItem(\"test\");\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            this.state.cards.map((props, id) =>{\r\n                return <Card key={id} title={props.title} content={props.content}/>}\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {SearchBar} from './components/SearchBar'\nimport { List } from './components/List'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar/>\n      <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}